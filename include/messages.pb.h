// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: messages.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_messages_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_messages_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3012000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3012004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_messages_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_messages_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[2]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_messages_2eproto;
namespace chat_app {
class DataMsg;
class DataMsgDefaultTypeInternal;
extern DataMsgDefaultTypeInternal _DataMsg_default_instance_;
class HeartbeatMsg;
class HeartbeatMsgDefaultTypeInternal;
extern HeartbeatMsgDefaultTypeInternal _HeartbeatMsg_default_instance_;
}  // namespace chat_app
PROTOBUF_NAMESPACE_OPEN
template<> ::chat_app::DataMsg* Arena::CreateMaybeMessage<::chat_app::DataMsg>(Arena*);
template<> ::chat_app::HeartbeatMsg* Arena::CreateMaybeMessage<::chat_app::HeartbeatMsg>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace chat_app {

// ===================================================================

class DataMsg PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:chat_app.DataMsg) */ {
 public:
  inline DataMsg() : DataMsg(nullptr) {};
  virtual ~DataMsg();

  DataMsg(const DataMsg& from);
  DataMsg(DataMsg&& from) noexcept
    : DataMsg() {
    *this = ::std::move(from);
  }

  inline DataMsg& operator=(const DataMsg& from) {
    CopyFrom(from);
    return *this;
  }
  inline DataMsg& operator=(DataMsg&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const DataMsg& default_instance();

  enum TestOneofCase {
    kMessageText = 3,
    TEST_ONEOF_NOT_SET = 0,
  };

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DataMsg* internal_default_instance() {
    return reinterpret_cast<const DataMsg*>(
               &_DataMsg_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(DataMsg& a, DataMsg& b) {
    a.Swap(&b);
  }
  inline void Swap(DataMsg* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DataMsg* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DataMsg* New() const final {
    return CreateMaybeMessage<DataMsg>(nullptr);
  }

  DataMsg* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DataMsg>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const DataMsg& from);
  void MergeFrom(const DataMsg& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DataMsg* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "chat_app.DataMsg";
  }
  protected:
  explicit DataMsg(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_messages_2eproto);
    return ::descriptor_table_messages_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kToFieldNumber = 2,
    kFromFieldNumber = 1,
    kMessageTextFieldNumber = 3,
  };
  // repeated string to = 2;
  int to_size() const;
  private:
  int _internal_to_size() const;
  public:
  void clear_to();
  const std::string& to(int index) const;
  std::string* mutable_to(int index);
  void set_to(int index, const std::string& value);
  void set_to(int index, std::string&& value);
  void set_to(int index, const char* value);
  void set_to(int index, const char* value, size_t size);
  std::string* add_to();
  void add_to(const std::string& value);
  void add_to(std::string&& value);
  void add_to(const char* value);
  void add_to(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& to() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_to();
  private:
  const std::string& _internal_to(int index) const;
  std::string* _internal_add_to();
  public:

  // string from = 1;
  void clear_from();
  const std::string& from() const;
  void set_from(const std::string& value);
  void set_from(std::string&& value);
  void set_from(const char* value);
  void set_from(const char* value, size_t size);
  std::string* mutable_from();
  std::string* release_from();
  void set_allocated_from(std::string* from);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_from();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_from(
      std::string* from);
  private:
  const std::string& _internal_from() const;
  void _internal_set_from(const std::string& value);
  std::string* _internal_mutable_from();
  public:

  // string message_text = 3;
  private:
  bool _internal_has_message_text() const;
  public:
  void clear_message_text();
  const std::string& message_text() const;
  void set_message_text(const std::string& value);
  void set_message_text(std::string&& value);
  void set_message_text(const char* value);
  void set_message_text(const char* value, size_t size);
  std::string* mutable_message_text();
  std::string* release_message_text();
  void set_allocated_message_text(std::string* message_text);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_message_text();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_message_text(
      std::string* message_text);
  private:
  const std::string& _internal_message_text() const;
  void _internal_set_message_text(const std::string& value);
  std::string* _internal_mutable_message_text();
  public:

  void clear_test_oneof();
  TestOneofCase test_oneof_case() const;
  // @@protoc_insertion_point(class_scope:chat_app.DataMsg)
 private:
  class _Internal;
  void set_has_message_text();

  inline bool has_test_oneof() const;
  inline void clear_has_test_oneof();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> to_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr from_;
  union TestOneofUnion {
    TestOneofUnion() {}
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr message_text_;
  } test_oneof_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 _oneof_case_[1];

  friend struct ::TableStruct_messages_2eproto;
};
// -------------------------------------------------------------------

class HeartbeatMsg PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:chat_app.HeartbeatMsg) */ {
 public:
  inline HeartbeatMsg() : HeartbeatMsg(nullptr) {};
  virtual ~HeartbeatMsg();

  HeartbeatMsg(const HeartbeatMsg& from);
  HeartbeatMsg(HeartbeatMsg&& from) noexcept
    : HeartbeatMsg() {
    *this = ::std::move(from);
  }

  inline HeartbeatMsg& operator=(const HeartbeatMsg& from) {
    CopyFrom(from);
    return *this;
  }
  inline HeartbeatMsg& operator=(HeartbeatMsg&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const HeartbeatMsg& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const HeartbeatMsg* internal_default_instance() {
    return reinterpret_cast<const HeartbeatMsg*>(
               &_HeartbeatMsg_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(HeartbeatMsg& a, HeartbeatMsg& b) {
    a.Swap(&b);
  }
  inline void Swap(HeartbeatMsg* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(HeartbeatMsg* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline HeartbeatMsg* New() const final {
    return CreateMaybeMessage<HeartbeatMsg>(nullptr);
  }

  HeartbeatMsg* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<HeartbeatMsg>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const HeartbeatMsg& from);
  void MergeFrom(const HeartbeatMsg& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(HeartbeatMsg* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "chat_app.HeartbeatMsg";
  }
  protected:
  explicit HeartbeatMsg(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_messages_2eproto);
    return ::descriptor_table_messages_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kActiveUsersFieldNumber = 2,
    kFromFieldNumber = 1,
  };
  // repeated string active_users = 2;
  int active_users_size() const;
  private:
  int _internal_active_users_size() const;
  public:
  void clear_active_users();
  const std::string& active_users(int index) const;
  std::string* mutable_active_users(int index);
  void set_active_users(int index, const std::string& value);
  void set_active_users(int index, std::string&& value);
  void set_active_users(int index, const char* value);
  void set_active_users(int index, const char* value, size_t size);
  std::string* add_active_users();
  void add_active_users(const std::string& value);
  void add_active_users(std::string&& value);
  void add_active_users(const char* value);
  void add_active_users(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& active_users() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_active_users();
  private:
  const std::string& _internal_active_users(int index) const;
  std::string* _internal_add_active_users();
  public:

  // string from = 1;
  void clear_from();
  const std::string& from() const;
  void set_from(const std::string& value);
  void set_from(std::string&& value);
  void set_from(const char* value);
  void set_from(const char* value, size_t size);
  std::string* mutable_from();
  std::string* release_from();
  void set_allocated_from(std::string* from);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_from();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_from(
      std::string* from);
  private:
  const std::string& _internal_from() const;
  void _internal_set_from(const std::string& value);
  std::string* _internal_mutable_from();
  public:

  // @@protoc_insertion_point(class_scope:chat_app.HeartbeatMsg)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> active_users_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr from_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_messages_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// DataMsg

// string from = 1;
inline void DataMsg::clear_from() {
  from_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& DataMsg::from() const {
  // @@protoc_insertion_point(field_get:chat_app.DataMsg.from)
  return _internal_from();
}
inline void DataMsg::set_from(const std::string& value) {
  _internal_set_from(value);
  // @@protoc_insertion_point(field_set:chat_app.DataMsg.from)
}
inline std::string* DataMsg::mutable_from() {
  // @@protoc_insertion_point(field_mutable:chat_app.DataMsg.from)
  return _internal_mutable_from();
}
inline const std::string& DataMsg::_internal_from() const {
  return from_.Get();
}
inline void DataMsg::_internal_set_from(const std::string& value) {
  
  from_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void DataMsg::set_from(std::string&& value) {
  
  from_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:chat_app.DataMsg.from)
}
inline void DataMsg::set_from(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  from_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:chat_app.DataMsg.from)
}
inline void DataMsg::set_from(const char* value,
    size_t size) {
  
  from_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:chat_app.DataMsg.from)
}
inline std::string* DataMsg::_internal_mutable_from() {
  
  return from_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* DataMsg::release_from() {
  // @@protoc_insertion_point(field_release:chat_app.DataMsg.from)
  return from_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void DataMsg::set_allocated_from(std::string* from) {
  if (from != nullptr) {
    
  } else {
    
  }
  from_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:chat_app.DataMsg.from)
}
inline std::string* DataMsg::unsafe_arena_release_from() {
  // @@protoc_insertion_point(field_unsafe_arena_release:chat_app.DataMsg.from)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return from_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void DataMsg::unsafe_arena_set_allocated_from(
    std::string* from) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (from != nullptr) {
    
  } else {
    
  }
  from_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      from, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:chat_app.DataMsg.from)
}

// repeated string to = 2;
inline int DataMsg::_internal_to_size() const {
  return to_.size();
}
inline int DataMsg::to_size() const {
  return _internal_to_size();
}
inline void DataMsg::clear_to() {
  to_.Clear();
}
inline std::string* DataMsg::add_to() {
  // @@protoc_insertion_point(field_add_mutable:chat_app.DataMsg.to)
  return _internal_add_to();
}
inline const std::string& DataMsg::_internal_to(int index) const {
  return to_.Get(index);
}
inline const std::string& DataMsg::to(int index) const {
  // @@protoc_insertion_point(field_get:chat_app.DataMsg.to)
  return _internal_to(index);
}
inline std::string* DataMsg::mutable_to(int index) {
  // @@protoc_insertion_point(field_mutable:chat_app.DataMsg.to)
  return to_.Mutable(index);
}
inline void DataMsg::set_to(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:chat_app.DataMsg.to)
  to_.Mutable(index)->assign(value);
}
inline void DataMsg::set_to(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:chat_app.DataMsg.to)
  to_.Mutable(index)->assign(std::move(value));
}
inline void DataMsg::set_to(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  to_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:chat_app.DataMsg.to)
}
inline void DataMsg::set_to(int index, const char* value, size_t size) {
  to_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:chat_app.DataMsg.to)
}
inline std::string* DataMsg::_internal_add_to() {
  return to_.Add();
}
inline void DataMsg::add_to(const std::string& value) {
  to_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:chat_app.DataMsg.to)
}
inline void DataMsg::add_to(std::string&& value) {
  to_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:chat_app.DataMsg.to)
}
inline void DataMsg::add_to(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  to_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:chat_app.DataMsg.to)
}
inline void DataMsg::add_to(const char* value, size_t size) {
  to_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:chat_app.DataMsg.to)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
DataMsg::to() const {
  // @@protoc_insertion_point(field_list:chat_app.DataMsg.to)
  return to_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
DataMsg::mutable_to() {
  // @@protoc_insertion_point(field_mutable_list:chat_app.DataMsg.to)
  return &to_;
}

// string message_text = 3;
inline bool DataMsg::_internal_has_message_text() const {
  return test_oneof_case() == kMessageText;
}
inline void DataMsg::set_has_message_text() {
  _oneof_case_[0] = kMessageText;
}
inline void DataMsg::clear_message_text() {
  if (_internal_has_message_text()) {
    test_oneof_.message_text_.Destroy(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
    clear_has_test_oneof();
  }
}
inline const std::string& DataMsg::message_text() const {
  // @@protoc_insertion_point(field_get:chat_app.DataMsg.message_text)
  return _internal_message_text();
}
inline void DataMsg::set_message_text(const std::string& value) {
  _internal_set_message_text(value);
  // @@protoc_insertion_point(field_set:chat_app.DataMsg.message_text)
}
inline std::string* DataMsg::mutable_message_text() {
  // @@protoc_insertion_point(field_mutable:chat_app.DataMsg.message_text)
  return _internal_mutable_message_text();
}
inline const std::string& DataMsg::_internal_message_text() const {
  if (_internal_has_message_text()) {
    return test_oneof_.message_text_.Get();
  }
  return *&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited();
}
inline void DataMsg::_internal_set_message_text(const std::string& value) {
  if (!_internal_has_message_text()) {
    clear_test_oneof();
    set_has_message_text();
    test_oneof_.message_text_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  test_oneof_.message_text_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void DataMsg::set_message_text(std::string&& value) {
  // @@protoc_insertion_point(field_set:chat_app.DataMsg.message_text)
  if (!_internal_has_message_text()) {
    clear_test_oneof();
    set_has_message_text();
    test_oneof_.message_text_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  test_oneof_.message_text_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:chat_app.DataMsg.message_text)
}
inline void DataMsg::set_message_text(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  if (!_internal_has_message_text()) {
    clear_test_oneof();
    set_has_message_text();
    test_oneof_.message_text_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  test_oneof_.message_text_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:chat_app.DataMsg.message_text)
}
inline void DataMsg::set_message_text(const char* value,
                             size_t size) {
  if (!_internal_has_message_text()) {
    clear_test_oneof();
    set_has_message_text();
    test_oneof_.message_text_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  test_oneof_.message_text_.Set(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size),
      GetArena());
  // @@protoc_insertion_point(field_set_pointer:chat_app.DataMsg.message_text)
}
inline std::string* DataMsg::_internal_mutable_message_text() {
  if (!_internal_has_message_text()) {
    clear_test_oneof();
    set_has_message_text();
    test_oneof_.message_text_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  return test_oneof_.message_text_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* DataMsg::release_message_text() {
  // @@protoc_insertion_point(field_release:chat_app.DataMsg.message_text)
  if (_internal_has_message_text()) {
    clear_has_test_oneof();
    return test_oneof_.message_text_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  } else {
    return nullptr;
  }
}
inline void DataMsg::set_allocated_message_text(std::string* message_text) {
  if (has_test_oneof()) {
    clear_test_oneof();
  }
  if (message_text != nullptr) {
    set_has_message_text();
    test_oneof_.message_text_.UnsafeSetDefault(message_text);
  }
  // @@protoc_insertion_point(field_set_allocated:chat_app.DataMsg.message_text)
}
inline std::string* DataMsg::unsafe_arena_release_message_text() {
  // @@protoc_insertion_point(field_unsafe_arena_release:chat_app.DataMsg.message_text)
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (_internal_has_message_text()) {
    clear_has_test_oneof();
    return test_oneof_.message_text_.UnsafeArenaRelease(
        &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  } else {
    return nullptr;
  }
}
inline void DataMsg::unsafe_arena_set_allocated_message_text(std::string* message_text) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (!_internal_has_message_text()) {
    test_oneof_.message_text_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  clear_test_oneof();
  if (message_text) {
    set_has_message_text();
    test_oneof_.message_text_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), message_text, GetArena());
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:chat_app.DataMsg.message_text)
}

inline bool DataMsg::has_test_oneof() const {
  return test_oneof_case() != TEST_ONEOF_NOT_SET;
}
inline void DataMsg::clear_has_test_oneof() {
  _oneof_case_[0] = TEST_ONEOF_NOT_SET;
}
inline DataMsg::TestOneofCase DataMsg::test_oneof_case() const {
  return DataMsg::TestOneofCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// HeartbeatMsg

// string from = 1;
inline void HeartbeatMsg::clear_from() {
  from_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& HeartbeatMsg::from() const {
  // @@protoc_insertion_point(field_get:chat_app.HeartbeatMsg.from)
  return _internal_from();
}
inline void HeartbeatMsg::set_from(const std::string& value) {
  _internal_set_from(value);
  // @@protoc_insertion_point(field_set:chat_app.HeartbeatMsg.from)
}
inline std::string* HeartbeatMsg::mutable_from() {
  // @@protoc_insertion_point(field_mutable:chat_app.HeartbeatMsg.from)
  return _internal_mutable_from();
}
inline const std::string& HeartbeatMsg::_internal_from() const {
  return from_.Get();
}
inline void HeartbeatMsg::_internal_set_from(const std::string& value) {
  
  from_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void HeartbeatMsg::set_from(std::string&& value) {
  
  from_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:chat_app.HeartbeatMsg.from)
}
inline void HeartbeatMsg::set_from(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  from_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:chat_app.HeartbeatMsg.from)
}
inline void HeartbeatMsg::set_from(const char* value,
    size_t size) {
  
  from_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:chat_app.HeartbeatMsg.from)
}
inline std::string* HeartbeatMsg::_internal_mutable_from() {
  
  return from_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* HeartbeatMsg::release_from() {
  // @@protoc_insertion_point(field_release:chat_app.HeartbeatMsg.from)
  return from_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void HeartbeatMsg::set_allocated_from(std::string* from) {
  if (from != nullptr) {
    
  } else {
    
  }
  from_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:chat_app.HeartbeatMsg.from)
}
inline std::string* HeartbeatMsg::unsafe_arena_release_from() {
  // @@protoc_insertion_point(field_unsafe_arena_release:chat_app.HeartbeatMsg.from)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return from_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void HeartbeatMsg::unsafe_arena_set_allocated_from(
    std::string* from) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (from != nullptr) {
    
  } else {
    
  }
  from_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      from, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:chat_app.HeartbeatMsg.from)
}

// repeated string active_users = 2;
inline int HeartbeatMsg::_internal_active_users_size() const {
  return active_users_.size();
}
inline int HeartbeatMsg::active_users_size() const {
  return _internal_active_users_size();
}
inline void HeartbeatMsg::clear_active_users() {
  active_users_.Clear();
}
inline std::string* HeartbeatMsg::add_active_users() {
  // @@protoc_insertion_point(field_add_mutable:chat_app.HeartbeatMsg.active_users)
  return _internal_add_active_users();
}
inline const std::string& HeartbeatMsg::_internal_active_users(int index) const {
  return active_users_.Get(index);
}
inline const std::string& HeartbeatMsg::active_users(int index) const {
  // @@protoc_insertion_point(field_get:chat_app.HeartbeatMsg.active_users)
  return _internal_active_users(index);
}
inline std::string* HeartbeatMsg::mutable_active_users(int index) {
  // @@protoc_insertion_point(field_mutable:chat_app.HeartbeatMsg.active_users)
  return active_users_.Mutable(index);
}
inline void HeartbeatMsg::set_active_users(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:chat_app.HeartbeatMsg.active_users)
  active_users_.Mutable(index)->assign(value);
}
inline void HeartbeatMsg::set_active_users(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:chat_app.HeartbeatMsg.active_users)
  active_users_.Mutable(index)->assign(std::move(value));
}
inline void HeartbeatMsg::set_active_users(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  active_users_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:chat_app.HeartbeatMsg.active_users)
}
inline void HeartbeatMsg::set_active_users(int index, const char* value, size_t size) {
  active_users_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:chat_app.HeartbeatMsg.active_users)
}
inline std::string* HeartbeatMsg::_internal_add_active_users() {
  return active_users_.Add();
}
inline void HeartbeatMsg::add_active_users(const std::string& value) {
  active_users_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:chat_app.HeartbeatMsg.active_users)
}
inline void HeartbeatMsg::add_active_users(std::string&& value) {
  active_users_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:chat_app.HeartbeatMsg.active_users)
}
inline void HeartbeatMsg::add_active_users(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  active_users_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:chat_app.HeartbeatMsg.active_users)
}
inline void HeartbeatMsg::add_active_users(const char* value, size_t size) {
  active_users_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:chat_app.HeartbeatMsg.active_users)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
HeartbeatMsg::active_users() const {
  // @@protoc_insertion_point(field_list:chat_app.HeartbeatMsg.active_users)
  return active_users_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
HeartbeatMsg::mutable_active_users() {
  // @@protoc_insertion_point(field_mutable_list:chat_app.HeartbeatMsg.active_users)
  return &active_users_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace chat_app

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_messages_2eproto
